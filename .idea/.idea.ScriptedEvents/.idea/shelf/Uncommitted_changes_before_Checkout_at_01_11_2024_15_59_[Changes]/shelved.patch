Index: ScriptedEvents/Actions/Logic/CallAction.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ScriptedEvents/Actions/Logic/CallAction.cs b/ScriptedEvents/Actions/Logic/RunScriptAction.cs
rename from ScriptedEvents/Actions/Logic/CallAction.cs
rename to ScriptedEvents/Actions/Logic/RunScriptAction.cs
--- a/ScriptedEvents/Actions/Logic/CallAction.cs	(revision 990c89340c459b1abc09d9d72d93b4bbcb33d8f1)
+++ b/ScriptedEvents/Actions/Logic/RunScriptAction.cs	(date 1730463719209)
@@ -1,23 +1,20 @@
-using ScriptedEvents.Enums;
-using ScriptedEvents.Interfaces;
-
-namespace ScriptedEvents.Actions
-{
-    using System;
-    using System.Collections.Generic;
-    using System.IO;
-
-    using MEC;
-    using ScriptedEvents.API.Extensions;
-    using ScriptedEvents.API.Features;
-    using ScriptedEvents.API.Features.Exceptions;
-    using ScriptedEvents.API.Modules;
+using System.Collections.Generic;
+using MEC;
+using ScriptedEvents.API.Extensions;
+using ScriptedEvents.API.Features;
+using ScriptedEvents.API.Modules;
+
+namespace ScriptedEvents.Actions.Logic
+{
+    using System;
+    using ScriptedEvents.Enums;
+    using ScriptedEvents.Interfaces;
     using ScriptedEvents.Structures;
 
-    public class CallAction : IHelpInfo, ITimingAction
+    public class RunScriptAction : IHelpInfo, ITimingAction
     {
         /// <inheritdoc/>
-        public string Name => "CALL";
+        public string Name => "RunScript";
 
         /// <inheritdoc/>
         public string[] Aliases => Array.Empty<string>();
@@ -26,48 +23,45 @@
         public string[] RawArguments { get; set; }
 
         /// <inheritdoc/>
-        public object[] Arguments { get; set; }
+        public object?[] Arguments { get; set; }
 
         /// <inheritdoc/>
         public ActionSubgroup Subgroup => ActionSubgroup.Logic;
 
         /// <inheritdoc/>
-        public string Description => "Executes a provided script. Will wait until called script finishes execution. Can provide arguments for the called script.";
+        public string Description => "Executes a provided script. Can provide arguments for the called script.";
 
         /// <inheritdoc/>
         public Argument[] ExpectedArguments => new[]
         {
-            new Argument("script", typeof(string), "The script to call.", true),
-            new Argument("arguments", typeof(string), "The arguments to provide for the called script. Can be empty. All arguments will be provided to the called script as {ARG1}, {ARG2} etc. and {ARGS}.", false),
+            new OptionsArgument("mode", true,
+                new Option("WaitToFinish", "Will wait until the executed script stops running before continuing. This option allows you to extract values returned by the called script."),
+                new Option("NoWait", "Will not wait until the script stops executing.")),
+            new Argument("script", typeof(Script), "The script to run.", true),
+            new Argument("arguments", typeof(string), "The arguments to provide for the called script. Can be empty. Arguments will be provided as literal values.", false),
         };
 
         /// <inheritdoc/>
-        public float? Execute(Script script, out ActionResponse message)
+        public float? Execute(Script currentScript, out ActionResponse message)
         {
-            /*
-            string scriptName = (string)Arguments[0];
-            Script calledScript;
+            string mode = Arguments[0]!.ToUpper();
+            var calledScript = (Script)Arguments[1]!;
+            var providedArguments = Arguments.Length > 2;
+            var shouldWait = string.Equals(mode, "NoWait", StringComparison.OrdinalIgnoreCase);
 
-            try
+            if (!providedArguments && !shouldWait)
             {
-                calledScript = MainPlugin.ScriptModule.TryParseScript(scriptName, script.Sender, false);
-                calledScript.CallerScript = script;
-            }
-            catch (DisabledScriptException)
-            {
-                message = new(false, $"Script '{scriptName}' is disabled.");
-                return 0;
-            }
-            catch (FileNotFoundException)
-            {
-                message = new(false, $"Script '{scriptName}' not found.");
-                return 0;
-            }
+                if (!MainPlugin.ScriptModule.TryRunScript(calledScript, out var error))
+                {
+                    message = new(
+                        false,
+                        null,
+                        error!);
+                    return 0;
+                }
 
-            if (Arguments.Length < 2)
-            {
                 message = new(true);
-                return Timing.WaitUntilDone(RunScript(calledScript, script));
+                return 0;
             }
 
             string[] args = RawArguments.JoinMessage(1).Split(' ');
@@ -99,16 +93,14 @@
 
             message = new(true);
             return Timing.WaitUntilDone(RunScript(calledScript, script));
-            */
             message = new(false,
                 new ErrorInfo("action not implemented", "action not implemented", "action not implemented").ToTrace());
             return 0;
         }
 
-        /*
         private CoroutineHandle RunScript(Script scriptToCall, Script script)
         {
-            scriptToCall.Execute();
+            MainPlugin.ScriptModule.TryRunScript(scriptToCall, out _);
             string coroutineKey = $"CALL_WAIT_FOR_FINISH_COROUTINE_{DateTime.Now.Ticks}";
             CoroutineHandle handle = Timing.RunCoroutine(InternalWaitUntil(scriptToCall), coroutineKey);
             CoroutineHelper.AddCoroutine("CALL", handle, script);
@@ -122,6 +114,5 @@
                 yield return Timing.WaitForSeconds(1 / MainPlugin.Configs.WaitUntilFrequency);
             }
         }
-        */
     }
 }
\ No newline at end of file
Index: ScriptedEvents/ScriptedEvents.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n  <PropertyGroup>\r\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\r\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\r\n    <ProjectGuid>{5F682ACF-8F17-4603-85AE-F4369F9F5FBA}</ProjectGuid>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNamespace>ScriptedEvents</RootNamespace>\r\n    <AssemblyName>ScriptedEvents</AssemblyName>\r\n    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>\r\n    <TargetFramework>net4.8</TargetFramework>\r\n    <FileAlignment>512</FileAlignment>\r\n    <Deterministic>true</Deterministic>\r\n    <LangVersion>9</LangVersion>\r\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Debug\\</OutputPath>\r\n    <DefineConstants>TRACE;DEBUG</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n    <PlatformTarget>x64</PlatformTarget>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Release\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x64'\">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <OutputPath>bin\\x64\\Debug\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n    <Optimize>true</Optimize>\r\n    <DebugType>full</DebugType>\r\n    <PlatformTarget>x64</PlatformTarget>\r\n    <LangVersion>9</LangVersion>\r\n    <ErrorReport>prompt</ErrorReport>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Release|x64'\">\r\n    <OutputPath>bin\\x64\\Release\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n    <Optimize>true</Optimize>\r\n    <DebugType>pdbonly</DebugType>\r\n    <PlatformTarget>x64</PlatformTarget>\r\n    <LangVersion>9</LangVersion>\r\n    <ErrorReport>prompt</ErrorReport>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Andrzej Debug|AnyCPU'\">\r\n    <OutputPath>..\\..\\..\\..\\AppData\\Roaming\\EXILED\\Plugins\\</OutputPath>\r\n    <DefineConstants>TRACE;DEBUG;ADEBUG</DefineConstants>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n    <Optimize>true</Optimize>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Andrzej Debug|x64'\">\r\n    <OutputPath>bin\\x64\\Andrzej Debug\\</OutputPath>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"Assembly-CSharp-firstpass\">\r\n      <HintPath>$(EXILED_REFERENCES)\\Assembly-CSharp-firstpass.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"UnityEngine.UnityWebRequestModule\">\r\n      <HintPath>$(EXILED_REFERENCES)\\UnityEngine.UnityWebRequestModule.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"UnityEngine.PhysicsModule\">\r\n      <HintPath>$(EXILED_REFERENCES)\\UnityEngine.PhysicsModule.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Xml\" />\r\n    <Reference Include=\"UnityEngine.CoreModule\">\r\n      <HintPath>$(EXILED_REFERENCES)\\UnityEngine.CoreModule.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Mirror\">\r\n      <HintPath>$(EXILED_REFERENCES)\\Mirror.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"Actions\\AllInOne\\GeneratorInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\AllInOne\\IntercomInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\AllInOne\\ItemInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\AllInOne\\LobbyInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\AllInOne\\MapInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\AllInOne\\RoundInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\AllInOne\\ServerInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\AllInOne\\TimeInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\AllInOne\\WarheadInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\AllInOne\\WaveInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\Broadcast\\ClearBroadcastsAction.cs\" />\r\n    <Compile Include=\"Actions\\CASSIE\\CassiePlayerAction.cs\" />\r\n    <Compile Include=\"Actions\\CASSIE\\ClearCassieAction.cs\" />\r\n    <Compile Include=\"Actions\\DebugActions\\DebugExtractAction.cs\" />\r\n    <Compile Include=\"Actions\\DebugActions\\DebugProcessorAction.cs\" />\r\n    <Compile Include=\"Actions\\Health\\HealAction.cs\" />\r\n    <Compile Include=\"Actions\\Item\\RandomItemAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\CleanupRagdollsAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\DoorPermAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\DoorStateAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\LightColorAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\LightsOffAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\RandomDoorAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\RandomRoomAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\SpawnGrenadeAction.cs\" />\r\n    <Compile Include=\"Actions\\Item\\LoadoutAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\CallAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\EndIfAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\FastCallAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\EndFunctionAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\FlipIfAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\StartIfAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\ReturnAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\StartFunctionAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\TriggerAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\CleanupItemsAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\ElevatorAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\SpawnRagdollAction.cs\" />\r\n    <Compile Include=\"Actions\\Math\\Math_AbsAction.cs\" />\r\n    <Compile Include=\"Actions\\Math\\Math_PowerAction.cs\" />\r\n    <Compile Include=\"Actions\\Math\\Math_RandomAction.cs\" />\r\n    <Compile Include=\"Actions\\Math\\Math_RootAction.cs\" />\r\n    <Compile Include=\"Actions\\Math\\Math_RoundAction.cs\" />\r\n    <Compile Include=\"Actions\\PlayerFetch\\EscapesAction.cs\" />\r\n    <Compile Include=\"Actions\\PlayerFetch\\RolePlayersAction.cs\" />\r\n    <Compile Include=\"Actions\\PlayerFetch\\TeamPlayersAction.cs\" />\r\n    <Compile Include=\"Actions\\PlayerFetch\\ZonePlayersAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\DisplayPlayerAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\KillsAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\RaycastAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\SpawnLoadoutRuleAction.cs\" />\r\n    <Compile Include=\"Actions\\ScriptInfo\\IsRunningAction.cs\" />\r\n    <Compile Include=\"Actions\\ScriptInfo\\ThisAction.cs\" />\r\n    <Compile Include=\"Actions\\ScriptInfo\\VExistsAction.cs\" />\r\n    <Compile Include=\"Actions\\Strings\\StrCountAction.cs\" />\r\n    <Compile Include=\"Actions\\Strings\\StrLenAction.cs\" />\r\n    <Compile Include=\"Actions\\Strings\\StrLowerAction.cs\" />\r\n    <Compile Include=\"Actions\\Strings\\StrRemoveAction.cs\" />\r\n    <Compile Include=\"Actions\\Strings\\StrReplaceAction.cs\" />\r\n    <Compile Include=\"Actions\\Strings\\StrSliceAction.cs\" />\r\n    <Compile Include=\"Actions\\Strings\\StrUpperAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\CopyAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\PrintPlayersAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\StaminaAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\EffectImmunityRuleAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\EventAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\GeneratorRuleAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\GeneratorAction.cs\" />\r\n    <Compile Include=\"Actions\\Round\\LobbyAction.cs\" />\r\n    <Compile Include=\"Actions\\Round\\RoundAction.cs\" />\r\n    <Compile Include=\"Actions\\Server\\ErrorAction.cs\" />\r\n    <Compile Include=\"Actions\\Misc\\FastHttpPostAction.cs\" />\r\n    <Compile Include=\"Actions\\Server\\ServerNameAction.cs\" />\r\n    <Compile Include=\"Actions\\Server\\PluginAction.cs\" />\r\n    <Compile Include=\"Actions\\Server\\PrintAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\AdvCustomInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\BypassAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\GodmodeAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\KickAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\BanAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\CustomInfoAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\MuteAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\NoclipAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\SetGroupAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\SetNameAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\DamageRuleAction.cs\" />\r\n    <Compile Include=\"Actions\\DebugActions\\DamageRuleDebug.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\DeleteInfectRule.cs\" />\r\n    <Compile Include=\"Actions\\Item\\GiveCandyAction.cs\" />\r\n    <Compile Include=\"Actions\\Broadcast\\HintAction.cs\" />\r\n    <Compile Include=\"Actions\\Item\\ClearInventoryAction.cs\" />\r\n    <Compile Include=\"Actions\\Broadcast\\CountdownAction.cs\" />\r\n    <Compile Include=\"Actions\\DebugActions\\CustomAction.cs\" />\r\n    <Compile Include=\"Actions\\Health\\DamageAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\EffectRuleAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\EnablePlayerAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\DisablePlayerAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\EnableAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\DisableAction.cs\" />\r\n    <Compile Include=\"Actions\\Teleportation\\TpPlayerAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\FilterAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\IndexPlayerAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\JoinAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\LimitAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\PlayerLenAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\PopAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\EvalAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\PlayerDataAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\SaveAction.cs\" />\r\n    <Compile Include=\"Actions\\Misc\\HttpPostAction.cs\" />\r\n    <Compile Include=\"Actions\\Misc\\HttpGetAction.cs\" />\r\n    <Compile Include=\"Actions\\Item\\RadioRangeAction.cs\" />\r\n    <Compile Include=\"API\\APITestLab\\ScriptedEventsIntegration.cs\" />\r\n    <Compile Include=\"API\\Constants\\Constants.cs\" />\r\n    <Compile Include=\"API\\Constants\\ConstMessages.cs\" />\r\n    <Compile Include=\"API\\Constants\\EnumDefinitions.cs\" />\r\n    <Compile Include=\"API\\Extensions\\InterfaceExtensions.cs\" />\r\n    <Compile Include=\"API\\Extensions\\TypeExtensions.cs\" />\r\n    <Compile Include=\"API\\Extensions\\StringExtensions.cs\" />\r\n    <Compile Include=\"API\\Features\\ArgumentProcessor.cs\" />\r\n    <Compile Include=\"API\\Features\\ConditionHelper.cs\" />\r\n    <Compile Include=\"API\\Features\\CoroutineHelper.cs\" />\r\n    <Compile Include=\"API\\Features\\Logger.cs\" />\r\n    <Compile Include=\"API\\Features\\Exceptions\\ScriptedEventsException.cs\" />\r\n    <Compile Include=\"API\\Features\\Exceptions\\VariableException.cs\" />\r\n    <Compile Include=\"API\\Features\\ScriptHelpGenerator\\Generator.cs\" />\r\n    <Compile Include=\"API\\Features\\ScriptHelpGenerator\\GeneratorConfig.cs\" />\r\n    <Compile Include=\"Actions\\Health\\KillAction.cs\" />\r\n    <Compile Include=\"Actions\\Samples\\Providers\\CassieSamples.cs\" />\r\n    <Compile Include=\"Actions\\Samples\\Interfaces\\ISampleAction.cs\" />\r\n    <Compile Include=\"Actions\\Samples\\Interfaces\\ISampleProvider.cs\" />\r\n    <Compile Include=\"Actions\\Samples\\Providers\\IfSamples.cs\" />\r\n    <Compile Include=\"Actions\\Samples\\Providers\\RadioRangeSamples.cs\" />\r\n    <Compile Include=\"Actions\\Samples\\Sample.cs\" />\r\n    <Compile Include=\"Actions\\Health\\AddAhpAction.cs\" />\r\n    <Compile Include=\"Actions\\Health\\SetMaxHPAction.cs\" />\r\n    <Compile Include=\"Actions\\Health\\SetHpAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\ReskinAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\SetRoleAction.cs\" />\r\n    <Compile Include=\"Actions\\Round\\TicketAction.cs\" />\r\n    <Compile Include=\"Actions\\Teleportation\\TpDoorAction.cs\" />\r\n    <Compile Include=\"Actions\\Teleportation\\TpSpawnAction.cs\" />\r\n    <Compile Include=\"Actions\\Teleportation\\TpRoomAction.cs\" />\r\n    <Compile Include=\"Actions\\Teleportation\\TpxAction.cs\" />\r\n    <Compile Include=\"Actions\\YieldingActions\\WaitAction.cs\" />\r\n    <Compile Include=\"API\\Modules\\CountdownModule.cs\" />\r\n    <Compile Include=\"API\\Features\\MsgGen.cs\" />\r\n    <Compile Include=\"API\\Modules\\EventScriptModule.cs\" />\r\n    <Compile Include=\"API\\Modules\\ObjectReferenceModule.cs\" />\r\n    <Compile Include=\"API\\Modules\\SEModule.cs\" />\r\n    <Compile Include=\"API\\Modules\\VariableSystem.cs\" />\r\n    <Compile Include=\"Commands\\CustomCommand.cs\" />\r\n    <Compile Include=\"Commands\\HelpCommand\\ScriptHelp.cs\" />\r\n    <Compile Include=\"Commands\\MainCommand\\Action.cs\" />\r\n    <Compile Include=\"Commands\\MainCommand\\ExecuteAutorunScript.cs\" />\r\n    <Compile Include=\"Commands\\MainCommand\\ListRunning.cs\" />\r\n    <Compile Include=\"Commands\\MainCommand\\StopScript.cs\" />\r\n    <Compile Include=\"Conditions\\Strings\\StringNotContains.cs\" />\r\n    <Compile Include=\"Conditions\\Strings\\StringContains.cs\" />\r\n    <Compile Include=\"Enums\\ActionFlags.cs\" />\r\n    <Compile Include=\"Enums\\ActionSubgroup.cs\" />\r\n    <Compile Include=\"Enums\\ArgFlag.cs\" />\r\n    <Compile Include=\"Enums\\CommandCooldownMode.cs\" />\r\n    <Compile Include=\"Enums\\CommandType.cs\" />\r\n    <Compile Include=\"Enums\\DamageRuleType.cs\" />\r\n    <Compile Include=\"Enums\\ErrorCode.cs\" />\r\n    <Compile Include=\"Enums\\ExecuteContext.cs\" />\r\n    <Compile Include=\"Enums\\LogType.cs\" />\r\n    <Compile Include=\"Enums\\MessageType.cs\" />\r\n    <Compile Include=\"Interfaces\\IAction.cs\" />\r\n    <Compile Include=\"Interfaces\\ICustomReadDisplay.cs\" />\r\n    <Compile Include=\"Interfaces\\IHelpInfo.cs\" />\r\n    <Compile Include=\"Interfaces\\IHiddenAction.cs\" />\r\n    <Compile Include=\"Interfaces\\IIgnoresIfActionBlock.cs\" />\r\n    <Compile Include=\"Interfaces\\ILogicAction.cs\" />\r\n    <Compile Include=\"Interfaces\\ILongDescription.cs\" />\r\n    <Compile Include=\"Interfaces\\IMimicsVariableAction.cs\" />\r\n    <Compile Include=\"Interfaces\\IOption.cs\" />\r\n    <Compile Include=\"Interfaces\\IReturnValueAction.cs\" />\r\n    <Compile Include=\"Interfaces\\IScriptAction.cs\" />\r\n    <Compile Include=\"Interfaces\\IScriptComponent.cs\" />\r\n    <Compile Include=\"Interfaces\\ITimingAction.cs\" />\r\n    <Compile Include=\"Structures\\ActionNameData.cs\" />\r\n    <Compile Include=\"Structures\\ActionReturnValues.cs\" />\r\n    <Compile Include=\"Structures\\ArgumentProcessResult.cs\" />\r\n    <Compile Include=\"Structures\\ArgValuePredicate.cs\" />\r\n    <Compile Include=\"Structures\\Contributor.cs\" />\r\n    <Compile Include=\"Structures\\CoroutineData.cs\" />\r\n    <Compile Include=\"Structures\\CustomCommand.cs\" />\r\n    <Compile Include=\"Structures\\DamageRule.cs\" />\r\n    <Compile Include=\"Structures\\EnumDefinition.cs\" />\r\n    <Compile Include=\"Structures\\ErrorInfo.cs\" />\r\n    <Compile Include=\"Structures\\ErrorTrace.cs\" />\r\n    <Compile Include=\"Structures\\Flag.cs\" />\r\n    <Compile Include=\"Structures\\ItemObjectOrType.cs\" />\r\n    <Compile Include=\"Structures\\Option.cs\" />\r\n    <Compile Include=\"Structures\\OptionValueDepending.cs\" />\r\n    <Compile Include=\"Structures\\SuggestedOptionsArgument.cs\" />\r\n    <Compile Include=\"Structures\\OptionsArgument.cs\" />\r\n    <Compile Include=\"Structures\\PlayerCollection.cs\" />\r\n    <Compile Include=\"Structures\\PlayerDisable.cs\" />\r\n    <Compile Include=\"Structures\\PlayerLoopInfo.cs\" />\r\n    <Compile Include=\"Structures\\RoleTypeIdOrTeam.cs\" />\r\n    <Compile Include=\"Structures\\VariableResult.cs\" />\r\n    <Compile Include=\"Translations.cs\" />\r\n    <Compile Include=\"Tutorials\\Actions\\KillActionTutorial.cs\" />\r\n    <Compile Include=\"Tutorials\\ITutorial.cs\" />\r\n    <Compile Include=\"Variables\\Interfaces\\ILiteralVariable.cs\" />\r\n    <Compile Include=\"Structures\\ActionResponse.cs\" />\r\n    <Compile Include=\"API\\Features\\Exceptions\\DisabledScriptException.cs\" />\r\n    <Compile Include=\"Conditions\\Floats\\GreaterThanOrEqualTo.cs\" />\r\n    <Compile Include=\"Conditions\\Floats\\LessThanOrEqualTo.cs\" />\r\n    <Compile Include=\"Conditions\\Floats\\NotEqual.cs\" />\r\n    <Compile Include=\"Conditions\\Interfaces\\ICondition.cs\" />\r\n    <Compile Include=\"Conditions\\Interfaces\\IStringCondition.cs\" />\r\n    <Compile Include=\"Conditions\\Strings\\StringNotEqual.cs\" />\r\n    <Compile Include=\"Conditions\\Strings\\StringEqual.cs\" />\r\n    <Compile Include=\"Config.cs\" />\r\n    <Compile Include=\"DemoScripts\\About.cs\" />\r\n    <Compile Include=\"DemoScripts\\ConditionSamples.cs\" />\r\n    <Compile Include=\"DemoScripts\\IDemoScript.cs\" />\r\n    <Compile Include=\"Commands\\MainCommand\\ReadScript.cs\" />\r\n    <Compile Include=\"Commands\\MainCommand\\StopAllScripts.cs\" />\r\n    <Compile Include=\"Commands\\MainCommand\\ListScripts.cs\" />\r\n    <Compile Include=\"Commands\\MainCommand\\ScriptedEventsParent.cs\" />\r\n    <Compile Include=\"Actions\\Broadcast\\BroadcastAction.cs\" />\r\n    <Compile Include=\"Actions\\Item\\ItemAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\GotoAction.cs\" />\r\n    <Compile Include=\"Actions\\Misc\\HelpAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\InfectRuleAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\SizeAction.cs\" />\r\n    <Compile Include=\"Actions\\DebugActions\\NullAction.cs\" />\r\n    <Compile Include=\"Actions\\RoundRule\\SpawnRuleAction.cs\" />\r\n    <Compile Include=\"Actions\\CASSIE\\CassieAction.cs\" />\r\n    <Compile Include=\"Actions\\Server\\CommandAction.cs\" />\r\n    <Compile Include=\"Actions\\DebugActions\\DebugMathAction.cs\" />\r\n    <Compile Include=\"Actions\\DebugActions\\DebugConditionLogAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\DecontaminateAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\DoorAction.cs\" />\r\n    <Compile Include=\"Actions\\Player\\EffectAction.cs\" />\r\n    <Compile Include=\"Actions\\Server\\LogAction.cs\" />\r\n    <Compile Include=\"Actions\\Logic\\StopAction.cs\" />\r\n    <Compile Include=\"Actions\\Variable\\GlobalSaveAction.cs\" />\r\n    <Compile Include=\"Actions\\Map\\TeslaAction.cs\" />\r\n    <Compile Include=\"Actions\\DebugActions\\WaitUntilDebugAction.cs\" />\r\n    <Compile Include=\"API\\Features\\ApiHelper.cs\" />\r\n    <Compile Include=\"Commands\\MainCommand\\ExecuteScript.cs\" />\r\n    <Compile Include=\"Conditions\\Floats\\Equal.cs\" />\r\n    <Compile Include=\"Conditions\\Floats\\LessThan.cs\" />\r\n    <Compile Include=\"Conditions\\Floats\\GreaterThan.cs\" />\r\n    <Compile Include=\"Conditions\\Interfaces\\IFloatCondition.cs\" />\r\n    <Compile Include=\"Structures\\Argument.cs\" />\r\n    <Compile Include=\"Structures\\ConditionResponse.cs\" />\r\n    <Compile Include=\"Structures\\Countdown.cs\" />\r\n    <Compile Include=\"Structures\\MathResult.cs\" />\r\n    <Compile Include=\"Variables\\CustomLiteralVariable.cs\" />\r\n    <Compile Include=\"Variables\\PlayerCountVariables.cs\" />\r\n    <Compile Include=\"Variables\\RoleVariables.cs\" />\r\n    <Compile Include=\"API\\Features\\Parser.cs\" />\r\n    <Compile Include=\"API\\Modules\\EventHandlingModule.cs\" />\r\n    <Compile Include=\"Actions\\Map\\WarheadAction.cs\" />\r\n    <Compile Include=\"MainPlugin.cs\" />\r\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\r\n    <Compile Include=\"Script.cs\" />\r\n    <Compile Include=\"API\\Modules\\ScriptModule.cs\" />\r\n    <Compile Include=\"Structures\\InfectRule.cs\" />\r\n    <Compile Include=\"Variables\\Interfaces\\IPlayerVariable.cs\" />\r\n    <Compile Include=\"Variables\\Interfaces\\IVariable.cs\" />\r\n    <Compile Include=\"Variables\\Interfaces\\IVariableGroup.cs\" />\r\n    <Compile Include=\"Variables\\CustomPlayerVariable.cs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"DemoScripts\\DemoScript.cs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ExMod.Exiled\">\r\n      <Version>8.13.1</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"Tutorials\\Installation\\\" />\r\n  </ItemGroup>\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n</Project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ScriptedEvents/ScriptedEvents.csproj b/ScriptedEvents/ScriptedEvents.csproj
--- a/ScriptedEvents/ScriptedEvents.csproj	(revision 990c89340c459b1abc09d9d72d93b4bbcb33d8f1)
+++ b/ScriptedEvents/ScriptedEvents.csproj	(date 1730462012769)
@@ -119,7 +119,7 @@
     <Compile Include="Actions\Map\RandomRoomAction.cs" />
     <Compile Include="Actions\Map\SpawnGrenadeAction.cs" />
     <Compile Include="Actions\Item\LoadoutAction.cs" />
-    <Compile Include="Actions\Logic\CallAction.cs" />
+    <Compile Include="Actions\Logic\RunScriptAction.cs" />
     <Compile Include="Actions\Logic\EndIfAction.cs" />
     <Compile Include="Actions\Logic\FastCallAction.cs" />
     <Compile Include="Actions\Logic\EndFunctionAction.cs" />
Index: ScriptedEvents/API/Features/ArgumentProcessor.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using ScriptedEvents.Interfaces;\r\n\r\nnamespace ScriptedEvents.API.Features\r\n{\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using System.Text.RegularExpressions;\r\n\r\n    using Exiled.API.Features;\r\n    using Exiled.API.Features.Doors;\r\n    using PlayerRoles;\r\n    using ScriptedEvents.API.Extensions;\r\n    using ScriptedEvents.API.Modules;\r\n    using ScriptedEvents.Structures;\r\n    using ScriptedEvents.Variables.Interfaces;\r\n\r\n    /// <summary>\r\n    /// Contains methods to process action or variable arguments.\r\n    /// </summary>\r\n    public static class ArgumentProcessor\r\n    {\r\n        /// <summary>\r\n        /// Processes arguments.\r\n        /// </summary>\r\n        /// <param name=\"expectedArguments\">The expected arguments.</param>\r\n        /// <param name=\"args\">The provided arguments.</param>\r\n        /// <param name=\"action\">The action or variable performing the process.</param>\r\n        /// <param name=\"script\">The script source.</param>\r\n        /// <returns>The result of the process.</returns>\r\n        public static ArgumentProcessResult ProcessActionArguments(Argument[] expectedArguments, string[] args, IAction action, Script script)\r\n        {\r\n            void Log(string message)\r\n            {\r\n                if (!script.IsDebug) return;\r\n                Logger.Debug($\"[ArgumentProcessor] [ProcessActionArguments] [{action.Name}] {message}\", script);\r\n            }\r\n\r\n            if (expectedArguments.Length == 0)\r\n            {\r\n                Log(\"This action doesnt use arguments. Ending processing.\");\r\n                return new(true);\r\n            }\r\n\r\n            int requiredArguments = expectedArguments.Count(arg => arg.Required);\r\n            if (args.Length < requiredArguments)\r\n            {\r\n                IEnumerable<string> labeledArgs = expectedArguments.Select(arg => $\"[{(arg.Required ? \"Required\" : \"Optional\")} argument '{arg.ArgumentName}']\");\r\n                return new(\r\n                    false,\r\n                    true,\r\n                    Error(\r\n                        $\"Action '{action.Name}' is missing {requiredArguments - args.Length} arguments.\",\r\n                        $\"Action defines these arguments: {string.Join(\", \", labeledArgs)}, of which {requiredArguments - args.Length} required arguments were not provided.\")\r\n                        .ToTrace());\r\n            }\r\n\r\n            ArgumentProcessResult success = new(true)\r\n            {\r\n                StrippedRawParameters = args.ToArray(),\r\n            };\r\n\r\n            for (int i = 0; i < expectedArguments.Length; i++)\r\n            {\r\n                // assign null to the expected argument if there are no more raw arguments\r\n                if (args.Length <= i)\r\n                {\r\n                    success.NewParameters.Add(null);\r\n                    continue;\r\n                }\r\n\r\n                Argument argument = expectedArguments[i];\r\n                string input = args[i];\r\n\r\n                ArgumentProcessResult res = ProcessIndividualParameter(argument, input, action, script);\r\n                if (!res.ShouldExecute)\r\n                {\r\n                    return res; // Throw issue to end-user\r\n                }\r\n\r\n                success.NewParameters.Add(res.NewParameters.First());\r\n            }\r\n\r\n            success.NewParameters.AddRange(args.Skip(expectedArguments.Length).Select(arg =>\r\n            {\r\n                if (TryProcessSmartArgumentsInContaminatedString(arg, action, script, out string saRes))\r\n                {\r\n                    return saRes;\r\n                }\r\n\r\n                return Parser.ReplaceContaminatedValueSyntax(arg, script);\r\n            }).ToArray());\r\n\r\n            Log($\"Processed action parameters: '{string.Join(\", \", success.NewParameters.Select(x => x.ToString()))}'\");\r\n\r\n            return success;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Tries to process the argument for a quick argument.\r\n        /// </summary>\r\n        /// <param name=\"input\">The provided input.</param>\r\n        /// <param name=\"action\">The action or variable performing the process.</param>\r\n        /// <param name=\"source\">The script source.</param>\r\n        /// <param name=\"result\">The resulting string. Empty if method returns false.</param>\r\n        /// <returns>The output of the process.</returns>\r\n        public static bool TryProcessSmartArgumentsInContaminatedString(string input, IAction action, Script source, out string result)\r\n        {\r\n            bool didSomething = false;\r\n\r\n            // Regex pattern to match '#' followed by a digit\r\n            Regex regex = new(@\"#(\\d)\");\r\n            result = input; // Start with input as the base result\r\n\r\n            var matches = regex.Matches(input);\r\n\r\n            foreach (Match match in matches)\r\n            {\r\n                int index = match.Index;\r\n\r\n                // Try to parse the number after '#'\r\n                if (!int.TryParse(match.Groups[1].Value, out int lastNum) || lastNum < 1)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                Logger.Debug($\"[SMART ARG PROC] Found '#' syntax with index '{lastNum}' at position {index}\", source);\r\n\r\n                string argument;\r\n                try\r\n                {\r\n                    // Fetch smart argument based on index\r\n                    var res = source.SmartArguments[action][lastNum - 1]();\r\n                    if (res.Item1 is not null)\r\n                    {\r\n                        Logger.ScriptError(res.Item1!, source);\r\n                        continue;\r\n                    }\r\n\r\n                    if (res.Item3 != typeof(string))\r\n                    {\r\n                        var trace = Error(\r\n                            \"Invalid type returned from a smart argument\",\r\n                            $\"The value under the smart argument '{match.Value}' is not a literal value, but value of type '{res.Item3!.Name}'.\")\r\n                            .ToTrace();\r\n                        Logger.ScriptError(trace, source);\r\n                    }\r\n\r\n                    argument = (string)res.Item2!;\r\n                }\r\n                catch (IndexOutOfRangeException)\r\n                {\r\n                    continue;\r\n                }\r\n                catch (KeyNotFoundException)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                Logger.Debug($\"[SMART ARG PROC] Index '{lastNum}' is valid\", source);\r\n\r\n                // Replace the '#<number>' with the processed argument\r\n                result = result.Replace(match.Value, argument);\r\n                didSomething = true;\r\n\r\n                Logger.Debug($\"[SMART ARG PROC] Success! Smart arg used correctly. Result: {result}\", source);\r\n            }\r\n\r\n            return didSomething;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Tries to process the argument for a quick argument.\r\n        /// </summary>\r\n        /// <param name=\"input\">The provided input.</param>\r\n        /// <param name=\"action\">The action or variable performing the process.</param>\r\n        /// <param name=\"source\">The script source.</param>\r\n        /// <param name=\"result\">The resulting string. Empty if method returns false.</param>\r\n        /// <returns>The output of the process.</returns>\r\n        public static bool TryProcessSmartArgument(string input, IAction action, Script source, out object? result, out Type? type)\r\n        {\r\n            result = null;\r\n            type = null;\r\n\r\n            // Regex pattern to match '#' followed by a digit\r\n            Regex regex = new(@\"#(\\d)\");\r\n            result = input; // Start with input as the base result\r\n\r\n            var matches = regex.Matches(input);\r\n\r\n            if (matches.Count != 1)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            var match = matches[0];\r\n\r\n            if (match.Length != input.Length)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            // Try to parse the number after '#'\r\n            if (!int.TryParse(match.Groups[1].Value, out int lastNum) || lastNum < 1)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            try\r\n            {\r\n                // Fetch smart argument based on index\r\n                var res = source.SmartArguments[action][lastNum - 1]();\r\n                if (res.Item1 is not null)\r\n                {\r\n                    Logger.ScriptError(res.Item1, source);\r\n                    return false;\r\n                }\r\n\r\n                result = res.Item2!;\r\n                type = res.Item3!;\r\n            }\r\n            catch (IndexOutOfRangeException)\r\n            {\r\n                return false;\r\n            }\r\n            catch (KeyNotFoundException)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Processes an individual argument.\r\n        /// </summary>\r\n        /// <param name=\"expected\">The expected argument.</param>\r\n        /// <param name=\"input\">The provided input.</param>\r\n        /// <param name=\"action\">The action or variable performing the process.</param>\r\n        /// <param name=\"source\">The script source.</param>\r\n        /// <returns>The output of the process.</returns>\r\n        public static ArgumentProcessResult ProcessIndividualParameter(Argument expected, string input, IAction action, Script source)\r\n        {\r\n            ArgumentProcessResult success = new(true);\r\n\r\n            Log($\"Parameter '{expected.ArgumentName}' needs a '{expected.Flag.Name}' type.\");\r\n\r\n            // Extra magic for options\r\n            if (expected is OptionsArgument options)\r\n            {\r\n                if (options.Options.All(o => !string.Equals(o.Name, input, StringComparison.CurrentCultureIgnoreCase))\r\n                    && options is not SuggestedOptionsArgument)\r\n                {\r\n                    return new(\r\n                        false,\r\n                        true,\r\n                        Error(\r\n                            $\"Input '{input}' is not recongnized by option argument '{options.ArgumentName}' of action '{action.Name}'\",\r\n                            $\"This argument only supports one of the following: '{string.Join(\"', '\", options.Options.Select(o => o.Name))}'.\")\r\n                            .ToTrace());\r\n                }\r\n\r\n                success.NewParameters.Add(input);\r\n                Log($\"[OPTION ARG] Parameter '{expected.ArgumentName}' now has a value '{input}'\");\r\n                return success;\r\n            }\r\n\r\n            if (TryProcessSmartArgument(input, action, source, out var smartArgRes, out var type))\r\n            {\r\n                if (expected.Flag == type)\r\n                {\r\n                    success.NewParameters.Add(smartArgRes!);\r\n                }\r\n            }\r\n\r\n            // smart action arguments\r\n            if (TryProcessSmartArgumentsInContaminatedString(input, action, source, out var saResult))\r\n            {\r\n                input = saResult;\r\n            }\r\n\r\n            switch (expected.Flag.Name)\r\n            {\r\n                // Number Types:\r\n                case \"Boolean\":\r\n                    if (!input.IsBool(out var result, out var boolErr, source))\r\n                    {\r\n                        return ErrorByInfo(boolErr!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(result);\r\n                    break;\r\n\r\n                case \"Int32\": // int\r\n                    if (!Parser.TryCast<int>(int.TryParse, input, source, out var intRes, out var intErr))\r\n                    {\r\n                        ErrorByInfo(intErr!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(intRes);\r\n                    break;\r\n\r\n                case \"Int64\": // long\r\n                    if (!Parser.TryCast<long>(long.TryParse, input, source, out var longRes, out var longErr))\r\n                    {\r\n                        ErrorByInfo(longErr!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(longRes);\r\n                    break;\r\n\r\n                case \"Single\": // float\r\n                    if (!Parser.TryCast<float>(float.TryParse, input, source, out var floatRes, out var floatErr))\r\n                    {\r\n                        ErrorByInfo(floatErr!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(floatRes);\r\n                    break;\r\n\r\n                case \"UInt16\": // ushort\r\n                    if (!Parser.TryCast<ushort>(ushort.TryParse, input, source, out var ushortRes, out var ushortErr))\r\n                    {\r\n                        ErrorByInfo(ushortErr!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(ushortRes);\r\n                    break;\r\n\r\n                case \"Char\":\r\n                    if (!Parser.TryCast<char>(char.TryParse, input, source, out var charRes, out var charErr))\r\n                    {\r\n                        ErrorByInfo(charErr!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(charRes);\r\n                    break;\r\n\r\n                case \"Item\": throw new NotImplementedException();\r\n\r\n                case \"TimeSpan\": throw new NotImplementedException();\r\n\r\n                case \"IVariable\":\r\n                    if (!VariableSystem.TryGetVariable<IVariable>(input, source, out var someVar, false, out var someVarTrace))\r\n                    {\r\n                        return ErrorByTrace(someVarTrace!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(someVar!);\r\n                    break;\r\n\r\n                case \"ILiteralVariable\":\r\n                    if (!VariableSystem.TryGetVariable<ILiteralVariable>(input, source, out var strVar, false,\r\n                            out var strVarTrace))\r\n                    {\r\n                        return ErrorByTrace(strVarTrace!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(strVar!);\r\n                    break;\r\n\r\n                case \"IPlayerVariable\":\r\n                    if (!VariableSystem.TryGetVariable<IPlayerVariable>(input, source, out var plrVar, false,\r\n                            out var plrVarTrace))\r\n                    {\r\n                        return ErrorByTrace(plrVarTrace!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(plrVar!);\r\n                    break;\r\n\r\n                case \"Room[]\":\r\n                    if (!Parser.TryGetRooms(input, out var rooms, source, out var roomError))\r\n                    {\r\n                        return ErrorByInfo(roomError!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(rooms);\r\n                    break;\r\n\r\n                case \"Door[]\":\r\n                    if (!Parser.TryGetDoors(input, out var doors, source, out var doorError))\r\n                    {\r\n                        return ErrorByInfo(doorError!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(doors);\r\n                    break;\r\n\r\n                case \"Lift[]\":\r\n                    if (!Parser.TryGetLifts(input, out var lifts, source, out var liftError))\r\n                    {\r\n                        return ErrorByInfo(liftError!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(lifts);\r\n                    break;\r\n\r\n                // Special\r\n                case \"PlayerCollection\":\r\n                    if (!Parser.TryGetPlayers(input, null, out var players, source, out var collectionError))\r\n                    {\r\n                        return ErrorByTrace(collectionError!);\r\n                    }\r\n\r\n                    success.NewParameters.Add(players);\r\n                    break;\r\n\r\n                case \"Player\":\r\n                    if (!Parser.TryGetPlayers(input, null, out var players1, source, out var playerError))\r\n                    {\r\n                        return ErrorByTrace(playerError!);\r\n                    }\r\n\r\n                    var enumerable = players1 as Player[] ?? players1.ToArray();\r\n                    switch (enumerable.Length)\r\n                    {\r\n                        case 0:\r\n                            return ErrorByInfo(Error(\r\n                                $\"Provided variable '{input}' has no players.\",\r\n                                $\"There was one player expected, but no player is present.\"));\r\n                        case > 1:\r\n                            return ErrorByInfo(Error(\r\n                                $\"Provided variable '{input}' has too many players.\",\r\n                                $\"There was one player expected, but {enumerable.Length} players are present.\"));\r\n                    }\r\n\r\n                    success.NewParameters.Add(enumerable.FirstOrDefault());\r\n                    break;\r\n\r\n                case \"RoleTypeIdOrTeam\":\r\n                    if (Parser.TryGetEnum(input, out RoleTypeId rtResult, source, out _))\r\n                        success.NewParameters.Add(rtResult);\r\n                    else if (Parser.TryGetEnum(input, out Team teamResult, source, out _))\r\n                        success.NewParameters.Add(teamResult);\r\n                    else\r\n                        return ErrorByInfo(Error($\"Can't cast value '{input}' to RoleTypeIdOrTeam\", \"Provided value is not a RoleTypeId or Team.\"));\r\n\r\n                    break;\r\n\r\n                default:\r\n                    // Handle all enum types\r\n                    if (expected.Flag.BaseType == typeof(Enum))\r\n                    {\r\n                        var genericMethod = typeof(ArgumentProcessor).GetMethod(\"TryGetEnum\")\r\n                            !.MakeGenericMethod(expected.Flag);\r\n\r\n                        object?[] arguments = { input, null, source, null };\r\n\r\n                        genericMethod.Invoke(null, arguments);\r\n\r\n                        if (arguments[3] is ErrorInfo errorInfo)\r\n                        {\r\n                            return ErrorByInfo(errorInfo);\r\n                        }\r\n\r\n                        success.NewParameters.Add((arguments[1] as Enum) !);\r\n                    }\r\n\r\n                    success.NewParameters.Add(Parser.ReplaceContaminatedValueSyntax(input, source));\r\n                    break;\r\n            }\r\n\r\n            Log($\"Param '{expected.ArgumentName}' processed! STD value: '{success.NewParameters.Last()}' RAW value: '{input}'\");\r\n\r\n            return success;\r\n\r\n            ArgumentProcessResult ErrorByTrace(ErrorTrace trace)\r\n            {\r\n                trace.Append(Error(\r\n                    $\"Failed to process argument '{expected.ArgumentName}' for action '{action.Name}'\",\r\n                    $\"Provided input '{input}' is not possible to be interpreted as value of type '{expected.Flag}'.\"));\r\n                return new(false, true, trace);\r\n            }\r\n\r\n            ArgumentProcessResult ErrorByInfo(ErrorInfo error)\r\n            {\r\n                var trace = error.ToTrace();\r\n                trace.Append(Error(\r\n                    $\"Failed to process argument '{expected.ArgumentName}' for action '{action.Name}'\",\r\n                    $\"Provided input '{input}' is not possible to be interpreted as value of type '{expected.Flag}'.\"));\r\n                return new(false, true, trace);\r\n            }\r\n\r\n            void Log(string message)\r\n            {\r\n                if (!source.IsDebug) return;\r\n                Logger.Debug($\"[ArgumentProcessor] [PIP] [{action.Name}] \" + message, source);\r\n            }\r\n        }\r\n\r\n        private static ErrorInfo Error(string name, string desc)\r\n        {\r\n            return new ErrorInfo(name, desc, \"ArgumentProcessor\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ScriptedEvents/API/Features/ArgumentProcessor.cs b/ScriptedEvents/API/Features/ArgumentProcessor.cs
--- a/ScriptedEvents/API/Features/ArgumentProcessor.cs	(revision 990c89340c459b1abc09d9d72d93b4bbcb33d8f1)
+++ b/ScriptedEvents/API/Features/ArgumentProcessor.cs	(date 1730463088343)
@@ -340,6 +340,8 @@
 
                 case "TimeSpan": throw new NotImplementedException();
 
+                case "Script": throw new NotImplementedException();
+
                 case "IVariable":
                     if (!VariableSystem.TryGetVariable<IVariable>(input, source, out var someVar, false, out var someVarTrace))
                     {
